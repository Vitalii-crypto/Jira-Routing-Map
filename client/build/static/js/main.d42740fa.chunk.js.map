{"version":3,"sources":["components/Info/Info.js","components/Map/Map.js","components/Search/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","className","directions","routes","legs","distance","text","duration","require","config","google","window","MapWithADirectionsRenderer","compose","withProps","googleMapURL","process","loadingElement","style","height","containerElement","mapElement","mapId","withScriptjs","withGoogleMap","tags","useContext","AppContext","useState","modeTraveling","setModeTraveling","inputOrigin","setInputOrigin","inputDestination","setInputDestination","waypoints","setWaypoints","setDirections","DirectionsService","maps","onOriginInputChange","e","target","value","onDestinationInputChange","onSearchButtonClick","a","geocoder","Geocoder","getCoords","address","isObj","geocode","results","status","GeocoderStatus","OK","alert","lat","geometry","location","lng","coord","LatLng","stopover","waypointsArr","Promise","all","map","t","coords","push","finalOrigin","finalDestination","route","origin","destination","travelMode","result","DirectionsStatus","originRef","useRef","destinationRef","onPlaceChanged","current","ref","placeholder","onChange","disabled","onClick","color","Dropdown","Toggle","Menu","Item","href","defaultZoom","defaultCenter","InputTag","setTags","tagInput","HTMLInputElement","removeTag","i","newTags","splice","tag","type","onKeyDown","val","key","find","toLowerCase","length","React","createContext","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d42740fa.chunk.js","sourcesContent":["import React from 'react';\nimport './Info.css';\n\n\nexport default function Info(props){\n    return(\n        <div className='result-container'>\n            <div className='result-text'>\n\n                <p>Distance:{props.directions?.routes[0].legs[0].distance.text}</p>\n                <p>Time:{props.directions?.routes[0].legs[0].duration.text}</p>\n            </div>\n        </div>\n    )\n}","import React, {useContext,  useRef, useState} from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer,\n} from 'react-google-maps';\nimport { compose, withProps } from 'recompose';\nimport { AppContext } from '../../App';\nimport Info from '../Info/Info';\nimport './Map.css';\nimport {Autocomplete} from \"@react-google-maps/api\";\nrequire('dotenv').config();\nconst google = window.google;\n\nexport const MapWithADirectionsRenderer = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_API_KEY}.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `620px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n    mapId: 'c8d3fb7368eb6e72',\n  }),\n  withScriptjs,\n  withGoogleMap,\n\n)(() => {\n  const { tags } = useContext(AppContext);\n\n  const [modeTraveling, setModeTraveling] = useState('DRIVING');\n  const [inputOrigin, setInputOrigin] = useState(null);\n  const [inputDestination, setInputDestination] = useState(null);\n  const [waypoints, setWaypoints] = useState([]);\n  const [directions, setDirections] = useState(null);\n\n  const DirectionsService = new google.maps.DirectionsService();\n\n  const onOriginInputChange = (e) => {\n    setInputOrigin(e.target.value);\n  };\n\n  const onDestinationInputChange = (e) => {\n    setInputDestination(e.target.value);\n  };\n\n  const onSearchButtonClick = async (e) => {\n    const geocoder = new google.maps.Geocoder();\n\n    const getCoords = async (address, isObj = false) => {\n      let coord;\n      await geocoder.geocode({ address }, async (results, status) => {\n        if (status !== google.maps.GeocoderStatus.OK) {\n          alert('Something got wrong ' + status);\n          return;\n        }\n        let lat = results[0].geometry.location.lat();\n        let lng = results[0].geometry.location.lng();\n\n        coord = new google.maps.LatLng(lat, lng);\n      });\n\n      if (!isObj) return coord;\n\n      return {\n        location: coord,\n        stopover: false,\n      };\n    };\n\n    let waypointsArr = [];\n\n    if (tags) {\n      await Promise.all(\n          tags.map(async (t) => {\n            const coords = await getCoords(t, true);\n            setWaypoints([...waypoints, coords]);\n            waypointsArr.push(coords);\n          })\n      );\n    }\n\n\n    const finalOrigin = await getCoords(inputOrigin);\n    const finalDestination = await getCoords(inputDestination);\n\n    await DirectionsService.route(\n      {\n        origin: finalOrigin,\n        destination: finalDestination,\n        waypoints: [...waypoints , ...waypointsArr],\n        travelMode: modeTraveling,\n      },\n      (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK)\n        {\n          alert('can`t build directions, chose another points');\n          return\n        }\n\n\n        setDirections(result);\n      }\n    );\n  };\n\nconst originRef = useRef();\nconst destinationRef = useRef();\n  return (\n    <>\n\n      <div className='input-container'>\n        <label>\n          <Autocomplete onPlaceChanged={(e)=>{onOriginInputChange({target:originRef.current})}}>\n            <input ref={originRef} placeholder=\"Point A\" className='origin' onChange={onOriginInputChange}/>\n          </Autocomplete>\n        </label>\n        <label>\n          <Autocomplete  onPlaceChanged={(e)=>{onDestinationInputChange({target:destinationRef.current})}}>\n            <input ref={destinationRef} placeholder=\"Point B\" className='destination' onChange={onDestinationInputChange} />\n          </Autocomplete>\n        </label>\n      </div>\n      <div className='select-mode-container'>\n        <button\n          disabled={!inputOrigin || !inputDestination}\n          className='buttonSearchcustom'\n          onClick={onSearchButtonClick}\n        >\n          <span style={{color: 'white'}}>Click!</span>\n          <span style={{color: 'white'}}>Build Direction</span>\n        </button>\n        <Dropdown>\n          <Dropdown.Toggle>mode: {modeTraveling}</Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => {\n                setModeTraveling('DRIVING');\n              }}\n              href='#/action-1'\n            >\n              Driving\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setModeTraveling('BICYCLING');\n              }}\n              href='#/action-2'\n            >\n              Bicycling\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setModeTraveling('TRANSIT');\n              }}\n              href='#/action-3'\n            >\n              Transit\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setModeTraveling('WALKING');\n              }}\n              href='#/action-4'\n            >\n              Walking{' '}\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n      <GoogleMap\n        defaultZoom={6}\n        defaultCenter={new google.maps.LatLng(49.0, 29.5)}\n      >\n        {directions && <DirectionsRenderer directions={directions} />}\n      </GoogleMap>\n\n      {directions && <Info directions={directions} />}\n\n    </>\n  );\n});\n","import React, { useContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport './Search.css';\n\n\nconst InputTag = () => {\n    const { tags, setTags } = useContext(AppContext);\n    const tagInput = useRef(HTMLInputElement)\n\n    const removeTag = (i) => {\n        const newTags = [...tags];\n        newTags.splice(i, 1);\n        setTags(newTags);\n    }\n\n    const inputKeyDown = (e) => {\n        const val = e.target.value;\n        if (e.key === 'Enter' && val) {\n            if (tags?.find((tag) => tag.toLowerCase() === val.toLowerCase())) {\n                return;\n            }\n            setTags([ ...tags, val ]);\n            e.target.value = '';\n        } else if (e.key === 'Backspace' && !val) {\n            removeTag(tags?.length - 1);\n        }\n    };\n\n\n\n    return (\n        <div className='input-tag'>\n            <ul className='input-tag__tags'>\n                {tags && tags.map((tag, i) => (\n                    <li key={tag}>\n                        {tag}\n                        <button\n                            type='button'\n                            onClick={() => {\n                                removeTag(i);\n                            }}\n                        >\n                            +\n                        </button>\n                    </li>\n                ))}\n                <li className='input-tag__tags__input'>\n\n                    <input\n                        placeholder=\"Add waypoint\"\n                        className='waypoints'\n                        type='text'\n                        onKeyDown={inputKeyDown}\n                        ref={tagInput}\n                    />\n\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default InputTag;\n\n","import './App.css';\nimport React, { useState } from 'react';\nimport {MapWithADirectionsRenderer} from \"./components/Map/Map\";\nimport Search from \"./components/Search/Search\";\n\n\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n    const [tags, setTags] = useState([]);\n\n    return (\n        <>\n            <AppContext.Provider value={{tags, setTags}}>\n                <MapWithADirectionsRenderer/>\n                <Search/>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}